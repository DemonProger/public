{"version":3,"sources":["widgets/left-toolbar/styles.module.css","widgets/nav-map/styles.module.css","widgets/templates/cards/styles.module.css","thirdparty/icons/double-arrow-right.svg","widgets/templates/header/styles.module.css","widgets/publics/styles.module.css","widgets/templates/authorization/authorization.module.css","widgets/templates/authorization/email.svg","widgets/templates/authorization/login.svg","widgets/templates/authorization/user.svg","widgets/templates/header/dashboard.svg","widgets/left-toolbar/left-toolbar.tsx","widgets/templates/cards/public-card.tsx","widgets/publics/cards-box.tsx","widgets/nav-map/nav-map.tsx","widgets/templates/authorization/registration-modal.tsx","widgets/registration/api.ts","widgets/registration/actions.ts","widgets/registration/registration.tsx","widgets/header/actions-header.ts","widgets/templates/header/header.tsx","widgets/header/header.tsx","App.tsx","serviceWorker.js","widgets/publics/reducer.ts","widgets/registration/reducer.ts","index.tsx"],"names":["module","exports","Toolbar","ButtonGroup","vertical","className","Styles","Group","Button","variant","PublicCard","props","Col","xs","sm","Card","Body","CardBody","Title","CardTitle","title","Text","CardText","text","connect","state","dispatch","items","i","push","key","CardDeck","CardWrapper","Image","src","doubleRightArrow","FIELD_IDS","RegistrationWindow","Modal","show","onHide","onCloseClick","aria-labelledby","centered","Header","ModalHeader","Form","controlId","Label","InputGroup","Prepend","userIcon","Control","onChange","event","onFieldChanged","target","value","type","placeholder","emailIcon","loginIcon","Footer","onClick","onRegisterClick","sendDataUser","userObject","a","fetch","method","headers","body","JSON","stringify","response","TYPES","onRegesteredUser","message","onChangeEmail","email","onChangePassword","password","onChangeUsername","username","closeClickAction","registerUser","user","result","status","registrationReducer","actions","templateProps","fieldId","isVisible","TYPE","Navbar","bg","Brand","BrandWrapper","dashboardIcon","LogoIcon","logoText","Nav","optionsList","map","optionText","Link","onSomeOptionClick","isSearchEnabled","size","inline","FormControl","onEntranceClick","headerTemplateProps","searchClickHandler","App","Container","Row","Boolean","window","location","hostname","match","defaultStore","publics","reducer","initialState","action","rootReducer","combineReducers","publicsReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.026b85ad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Group\":\"styles_Group__12ABq\",\"Button\":\"styles_Button__3opCD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Group\":\"styles_Group__1Y5T6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardWrapper\":\"styles_CardWrapper__NyAAw\",\"Card\":\"styles_Card__3xJt8\",\"CardBody\":\"styles_CardBody__HODG2\",\"CardTitle\":\"styles_CardTitle__3urJk\",\"CardIcon\":\"styles_CardIcon__2p-Ku\",\"CardText\":\"styles_CardText__2LQt9\"};","module.exports = __webpack_public_path__ + \"static/media/double-arrow-right.fa256ef3.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BrandWrapper\":\"styles_BrandWrapper__1wp7r\",\"LogoIcon\":\"styles_LogoIcon__2AJWl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardWrapper\":\"styles_CardWrapper__2VoQL\",\"Card\":\"styles_Card__1IA3Q\",\"CardBody\":\"styles_CardBody__3WpwS\",\"CardTitle\":\"styles_CardTitle__kLyuK\",\"CardIcon\":\"styles_CardIcon__2gTjG\",\"CardText\":\"styles_CardText__1zPdT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ModalHeader\":\"authorization_ModalHeader__2RQGs\"};","module.exports = __webpack_public_path__ + \"static/media/email.f7155859.svg\";","module.exports = __webpack_public_path__ + \"static/media/login.d644ed95.svg\";","module.exports = __webpack_public_path__ + \"static/media/user.02bb06b8.svg\";","module.exports = __webpack_public_path__ + \"static/media/dashboard.9494657e.svg\";","\r\n \r\nimport * as React from \"react\"\r\nimport { ButtonGroup, Button } from 'react-bootstrap'\r\nimport Styles from './styles.module.css'\r\n\r\n\r\nexport const Toolbar = () => {\r\n  return (  \r\n    <ButtonGroup vertical className={Styles.Group}>\r\n        <Button variant=\"outline-dark\" className={Styles.Button}>Новый паблик</Button>\r\n        <Button variant=\"outline-dark\" className={Styles.Button}>item 2</Button>\r\n        <Button variant=\"outline-dark\" className={Styles.Button}>item 1</Button>      \r\n        <Button variant=\"outline-dark\" className={Styles.Button}>item 1</Button>\r\n    </ButtonGroup>\r\n  )\r\n}\r\n\r\n\r\nexport default Toolbar"," \r\n\r\nimport * as React from \"react\"\r\nimport { Card, Col } from 'react-bootstrap'\r\nimport Styles from './styles.module.css'\r\n\r\n\r\nexport type PublicCartProps = {\r\n  title: string, \r\n  text: string, \r\n  key: number\r\n}\r\n\r\n\r\nexport const PublicCard = (props: PublicCartProps) => {\r\n  return (\r\n    <Col xs={12} sm={4}>\r\n      <Card className={Styles.Card}>\r\n        <Card.Body className={Styles.CardBody}>\r\n          <Card.Title className={Styles.CardTitle}>{props.title}</Card.Title>\r\n          <Card.Text className={Styles.CardText}>{props.text}</Card.Text>\r\n        </Card.Body>  \r\n      </Card>\r\n    </Col>\r\n  )\r\n}\r\n\r\nexport default PublicCard\r\n\r\n\r\n\r\n","\r\n \r\nimport * as React from \"react\"\r\nimport { CardDeck } from 'react-bootstrap'\r\nimport PublicCard from '../templates/cards/public-card'\r\nimport Styles from './styles.module.css'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nexport const CardsBox = () => {\r\n\r\n  let items : any [] = []\r\n  for (let i of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\r\n    items.push((\r\n      <PublicCard key={i} title=\"test title\" text=\"test text\"/>\r\n    ))\r\n\r\n  return (\r\n    <CardDeck className={Styles.CardWrapper}>\r\n      {\r\n        items\r\n      }\r\n    </CardDeck>\r\n  )\r\n}\r\n\r\n\r\n/// export default CardsBox\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n      \r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n     \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardsBox)","\r\nimport * as React from \"react\"\r\nimport { ButtonGroup, Button, Image } from 'react-bootstrap'\r\nimport Styles from './styles.module.css'\r\nimport doubleRightArrow from '../../thirdparty/icons/double-arrow-right.svg'\r\n\r\nexport const Toolbar = () => {\r\n\r\n  return (  \r\n    <ButtonGroup className={Styles.Group}>\r\n         <Button variant='light' className={Styles.Button}>Виды</Button> \r\n         <Image src={doubleRightArrow} />      \r\n         <Button variant='light' className={Styles.Button}>Экскурсии</Button> \r\n         <Image src={doubleRightArrow} />      \r\n         <Button variant='light' className={Styles.Button}>Пешие</Button> \r\n         <Image src={doubleRightArrow} />      \r\n         <Button variant='light' className={Styles.Button}>клиент1</Button> \r\n    </ButtonGroup>\r\n  )\r\n}\r\n\r\n\r\nexport default Toolbar","\r\nimport * as React from \"react\";\r\nimport { Modal, Button, Form, InputGroup, Image } from 'react-bootstrap';\r\nimport Styles from './authorization.module.css'\r\nimport emailIcon from './email.svg'\r\nimport loginIcon from './login.svg'\r\nimport userIcon from './user.svg'\r\n\r\nexport type RegistrationWindowProps = {\r\n    username: string,\r\n    email: string,\r\n    password: string,\r\n\r\n    // onRegisterClick(): void, \r\n    onRegisterClick(): void,\r\n    onCloseClick(): void,\r\n    onFieldChanged(value: string, fieldId: string): void\r\n}\r\n\r\n\r\nexport const FIELD_IDS = {\r\n    name: \"name\",\r\n    email: \"email\",\r\n    password: \"password\"\r\n}\r\nexport type User={\r\n   username: string,\r\n   email: string,\r\n   password: string\r\n}\r\n\r\nconst RegistrationWindow = (props: RegistrationWindowProps) => {\r\n\r\n\r\n\r\n    return (\r\n        <Modal show={true} onHide={props.onCloseClick}\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header className={Styles.ModalHeader}>\r\n                <Modal.Title>Регистрация</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"formGroupUsername\">\r\n                        <Form.Label>Имя пользователя</Form.Label>\r\n                        <InputGroup>\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>\r\n                                    <Image src={userIcon}/>\r\n                                </InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <Form.Control  onChange={(event: any) => props.onFieldChanged(event.target.value, FIELD_IDS.name)} \r\n                                           type=\"text\" placeholder=\"Имя пользователя\" />\r\n                        </InputGroup>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formGroupEmail\">\r\n                        <Form.Label>Электронный адрес</Form.Label>\r\n                        <InputGroup>\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>\r\n                                    <Image src={emailIcon}/>\r\n                                </InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <Form.Control  onChange={(event: any)=>props.onFieldChanged(event.target.value, FIELD_IDS.email)} \r\n                                            type=\"email\" placeholder=\"Электронный адрес\" />\r\n                        </InputGroup>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formGroupPassword\">\r\n                        <Form.Label>Пароль</Form.Label>\r\n                        <InputGroup>\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>\r\n                                    <Image src={loginIcon} />\r\n                                </InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <Form.Control onChange={(event: any)=>props.onFieldChanged(event.target.value, FIELD_IDS.password)} \r\n                                          type=\"password\" placeholder=\"Пароль\" />\r\n                        </InputGroup>\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n                <Button variant=\"info\" onClick={props.onRegisterClick}>\r\n                    Зарегистрироваться\r\n                </Button>\r\n                <Button variant=\"info\" onClick={props.onCloseClick}>\r\n                    Закрыть\r\n                </Button>\r\n            </Modal.Footer>\r\n\r\n        </Modal>\r\n\r\n    )\r\n}\r\n\r\nexport default RegistrationWindow\r\n","import { User} from '../templates/authorization/registration-modal' \r\n\r\n\r\nconst  sendDataUser= async (userObject: User)=>{\r\n\r\n    let response = await fetch('/user', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n\r\n        },\r\n        body: JSON.stringify(userObject)\r\n\r\n    } ); \r\n    return response;\r\n\r\n}\r\n\r\nexport default sendDataUser\r\n","import { User } from \"../templates/authorization/registration-modal\"\r\nimport sendDataUser from \"./api\"\r\n\r\n\r\nexport const TYPES = {\r\n    TYPE_CLOSE_CLICK: \"close-clicked\",\r\n    TYPE_ONCHANGE_FIELD_USERNAME: \"change-user-field\",\r\n    TYPE_ONCHANGE_FIELD_EMAIL: \"change-email-field\",\r\n    TYPE_ONCHANGE_FIELD_PASSWORD: \"change-password-field\",\r\n    TYPE_ONREGISTERED_USER: \"registered-user\"\r\n}\r\n\r\n\r\nexport const closeClickAction = () => {\r\n    return {\r\n        type: TYPES.TYPE_CLOSE_CLICK\r\n    }\r\n}\r\n\r\n//Action Creator\r\nexport const onChangeUsername=(value: string) => {\r\n        return {\r\n            type: TYPES.TYPE_ONCHANGE_FIELD_USERNAME,\r\n            username: value,\r\n        }\r\n}\r\n\r\nexport  const onChangeEmail=(value: string) => {\r\n        return {\r\n            type: TYPES.TYPE_ONCHANGE_FIELD_EMAIL,\r\n            email: value\r\n        }\r\n    }\r\n\r\n\r\nexport const onChangePassword = (value: string) => {\r\n        return {\r\n            type: TYPES.TYPE_ONCHANGE_FIELD_PASSWORD,\r\n            password: value\r\n        }\r\n    }\r\nconst onRegesteredUser=()=>{\r\n    return{\r\n        type: TYPES.TYPE_ONREGISTERED_USER,\r\n        message: \"User successfully added\"\r\n    }\r\n}\r\n\r\n\r\nexport const registerUser =async (user: User) => {\r\n    return  async (dispatch: any) => {\r\n        // request \r\n        let result = await sendDataUser(user);\r\n\r\n        switch(result.status){\r\n            case 201: return dispatch(onRegesteredUser);\r\n\r\n        }\r\n        // dispatch(onUserRegestered())\r\n        // dispatch(onLoginBuisy())\r\n        // dispatch(error())\r\n        //201-created пользователь, \r\n    }   \r\n}\r\n//может быть занят либо сам логин, либо сам email,\r\nexport default {\r\n    onChangeEmail,\r\n    onChangePassword,\r\n    onChangeUsername,\r\n    closeClickAction, \r\n    registerUser\r\n}","import * as React from \"react\"\r\nimport { connect } from 'react-redux'\r\nimport { RegistrationState } from './reducer'\r\nimport RegistrationWindow, { RegistrationWindowProps, FIELD_IDS, User } from '../templates/authorization/registration-modal'\r\nimport actions, { TYPES} from './actions'\r\n\r\n\r\nexport const Registraion = (props: any) => {\r\n\r\n  const onCloseClick = () => {\r\n    props.onCloseClick()\r\n  }\r\n  \r\n  const user: User={\r\n    username: props.username,\r\n    email: props.email,\r\n    password: props.password\r\n  }\r\n  \r\n  const onRegisterClick=()=>{\r\n    props.registerUser(user)\r\n  }\r\n\r\n  const onFieldChanged = (value: string, fieldId: string) => {\r\n    switch(fieldId){\r\n      case FIELD_IDS.name:  \r\n            props.onChangeUsername(value);\r\n            break;\r\n      case FIELD_IDS.email: \r\n            props.onChangeEmail(value);\r\n            break; \r\n      case FIELD_IDS.password: \r\n            props.onChangePassword(value);\r\n            break;\r\n    }\r\n    \r\n\r\n      \r\n  }\r\n  const templateProps: RegistrationWindowProps = {\r\n    username: props.username,\r\n    email: props.email,\r\n    password: props.password,\r\n    onCloseClick,\r\n    onFieldChanged,\r\n    onRegisterClick\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {\r\n        props.isVisible\r\n        &&\r\n        // <RegistrationWindow onCloseClick={onCloseClick} username={props.username} email={props.email}  password={props.password}/>\r\n        <RegistrationWindow {...templateProps} />\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    ...state.registrationReducer\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  \r\n  return {\r\n    onCloseClick: () => dispatch(actions.closeClickAction),\r\n\r\n    onChangeUsername: (value: string) => dispatch(actions.onChangeUsername),\r\n\r\n    onChangeEmail: (value: string) => dispatch(actions.onChangeEmail),\r\n\r\n    onChangePassword: (value: string) => dispatch(actions.onChangePassword),\r\n    \r\n    registerUser: (user: User)=> dispatch(actions.registerUser)\r\n  }\r\n\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Registraion)","\r\nexport const TYPE={\r\n    TYPE_CLICK_ENTRANCE: \"clicked-entrance\"\r\n}\r\n\r\n\r\nexport const onEntranceClick=()=>{\r\n    return {\r\n        type: TYPE.TYPE_CLICK_ENTRANCE\r\n    }\r\n    \r\n\r\n}\r\n\r\n\r\nexport default {\r\n    onEntranceClick\r\n}","\r\n \r\nimport * as React from \"react\"\r\nimport { Navbar, Nav, Form, FormControl, Button, Image } from 'react-bootstrap'\r\nimport dashboardIcon from './dashboard.svg'\r\nimport Styles from './styles.module.css'\r\n\r\n\r\nexport type HeaderProps = {\r\n  logoText: string, \r\n  optionsList: string[], \r\n  isSearchEnabled: boolean,   \r\n  searchClickHandler(searchText: string): void, \r\n  onSomeOptionClick(optionText: string): void\r\n}\r\n\r\n\r\nconst Header = (props: HeaderProps) => {\r\n  return (\r\n    <Navbar bg=\"light\" variant=\"light\">\r\n      <Navbar.Brand className={Styles.BrandWrapper}>\r\n        <Image src={dashboardIcon} className={Styles.LogoIcon} />\r\n        {props.logoText}\r\n      </Navbar.Brand>\r\n      <Nav className=\"mr-auto\">\r\n\r\n        {\r\n          props.optionsList.map(optionText => \r\n              <Nav.Link key={optionText} onClick={() => props.onSomeOptionClick(optionText)}>{optionText}</Nav.Link>\r\n          )\r\n        }\r\n\r\n        {\r\n          props.isSearchEnabled\r\n          &&\r\n          <Button variant=\"outline-info\" size=\"sm\" className=\"d-block d-sm-none\">Поиск</Button>\r\n        }\r\n\r\n\r\n      </Nav>\r\n      {\r\n        props.isSearchEnabled\r\n          && \r\n          <Form inline className=\"d-none d-sm-block\">\r\n            <FormControl type=\"text\" placeholder=\"Поиск\" className=\"mr-sm-2\" />\r\n            <Button variant=\"outline-info\">Найти</Button>\r\n        </Form>\r\n        }\r\n  </Navbar>\r\n  )\r\n}\r\n\r\nexport default Header","\r\nimport * as React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {TYPE} from './actions-header';\r\nimport HeaderTemplate from \"../templates/header/header\"\r\nimport {HeaderProps} from \"../templates/header/header\"\r\n\r\n\r\nconst Header=(props: any)=>{\r\n\r\n\r\n    const onSomeOptionClick=(optionText: string)=>{\r\n\r\n         if (optionText==='вход'){\r\n            props.onEntranceClick()\r\n         }\r\n    }\r\n    \r\n    const headerTemplateProps: HeaderProps = {\r\n        logoText: \"public\", \r\n        optionsList: [\"вход\", \"карта\", \"информация\"], \r\n        isSearchEnabled: true, \r\n        onSomeOptionClick: onSomeOptionClick,\r\n \r\n        searchClickHandler: props.searchClickHandler\r\n\r\n    }\r\n     return(\r\n           <HeaderTemplate {...headerTemplateProps}/>\r\n     )\r\n    \r\n}\r\n\r\n//чтение состояния\r\nlet mapStateToProps=(state: any)=>{\r\n    return{\r\n               \r\n    } \r\n}\r\n\r\n//передача события(действие для изменения состояния компонента)\r\n//это метод,функция, которая возвращает объект-ключ объекта-имя моего метода, значение-сама наша функция \r\nlet mapDispatchToProps=(dispatch: any)=>{\r\n   return {\r\n    onEntranceClick: ()=> dispatch({\r\n        type: TYPE.TYPE_CLICK_ENTRANCE // FIXED\r\n    }) \r\n   }\r\n}\r\n\r\n//connect-генерируем компонент\r\nexport default  connect(mapStateToProps, mapDispatchToProps)(Header)  ","\r\nimport React from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport './thirdparty/bootstrap/dist/css/bootstrap.css'\r\n\r\n\r\nimport Tollbar from './widgets/left-toolbar/left-toolbar'\r\nimport CardsBox from './widgets/publics/cards-box'\r\nimport NavMap from './widgets/nav-map/nav-map'\r\nimport Registration from './widgets/registration/registration'\r\nimport Header from './widgets/header/header'\r\n\r\nconst App = () => {\r\n    return (      \r\n      <Container>              \r\n        <Header />\r\n        <Row className=\"justify-content-md-center\">\r\n          <NavMap />          \r\n        </Row>        \r\n          <Row>\r\n            <Col sm={3} className=\"d-none d-sm-block\">\r\n              <Tollbar />\r\n            </Col>\r\n            <Col sm={9}>\r\n              <CardsBox />\r\n            </Col>\r\n          </Row>        \r\n          <Registration />\r\n      </Container>                     \r\n    )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","\r\n\r\nimport { Reducer } from 'redux'\r\n\r\n\r\nexport type Public = {\r\n    name: string\r\n    description: string\r\n}\r\n\r\n\r\nexport type PublicsStore = {\r\n    publics: Public[]\r\n}\r\n\r\n\r\nconst defaultStore : PublicsStore = {\r\n    publics: []\r\n}\r\n\r\n\r\nexport const reducer: Reducer<any> = (state: PublicsStore = defaultStore, action: any) => {\r\n    return state\r\n}\r\n\r\n\r\nexport default reducer","\r\nimport { Reducer } from 'redux'\r\nimport actions, { TYPES } from './actions'\r\nimport { TYPE } from '../header/actions-header'\r\nimport { FIELD_IDS } from './../templates/authorization/registration-modal';\r\n\r\nexport type RegistrationState = {\r\n    isVisible?: boolean,\r\n    username: string,\r\n    email: string,\r\n    password: string\r\n}\r\n\r\nexport const initialState: RegistrationState = {\r\n    isVisible: false,\r\n    username: '',\r\n    email: '',\r\n    password: ''\r\n}\r\n\r\n\r\n\r\nexport const reducer: Reducer<any> = (state: RegistrationState = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case TYPES.TYPE_CLOSE_CLICK: return {\r\n            ...state,\r\n            isVisible: false\r\n        }\r\n        case TYPE.TYPE_CLICK_ENTRANCE: return {\r\n            ...state,\r\n            isVisible: true\r\n        }\r\n        case TYPES.TYPE_ONCHANGE_FIELD_USERNAME: return {\r\n\r\n            ...state,\r\n            username: action.value\r\n        }\r\n        case TYPES.TYPE_ONCHANGE_FIELD_EMAIL: return{\r\n            ...state,\r\n            email: action.value\r\n        }\r\n        case TYPES.TYPE_ONCHANGE_FIELD_PASSWORD: return{\r\n            ...state,\r\n            password: action.value\r\n        }\r\n        case TYPES.TYPE_ONREGISTERED_USER: return{\r\n\r\n        }\r\n        default:\r\n            return state\r\n    }   \r\n    \r\n}\r\nexport default reducer\r\n","\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\n\r\nimport { applyMiddleware, createStore } from \"redux\"\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport { combineReducers } from \"redux\"\r\nimport { Provider } from 'react-redux'\r\nimport publicsReducer from './widgets/publics/reducer'\r\nimport registrationReducer from './widgets/registration/reducer'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    publicsReducer, \r\n    registrationReducer\r\n})\r\n\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}><App /></Provider>, document.getElementById('root')\r\n)\r\n\r\n\r\nserviceWorker.unregister()\r\n\r\n"],"sourceRoot":""}