{"version":3,"sources":["widgets/left-toolbar/styles.module.css","widgets/nav-map/styles.module.css","widgets/templates/cards/styles.module.css","thirdparty/icons/double-arrow-right.svg","widgets/templates/header/styles.module.css","widgets/publics/styles.module.css","widgets/templates/authorization/authorization.module.css","widgets/templates/authorization/email.svg","widgets/templates/authorization/login.svg","widgets/templates/authorization/user.svg","widgets/templates/header/dashboard.svg","widgets/left-toolbar/left-toolbar.tsx","widgets/templates/cards/public-card.tsx","widgets/publics/cards-box.tsx","widgets/nav-map/nav-map.tsx","widgets/templates/authorization/registration-modal.tsx","widgets/registration/actions.ts","widgets/registration/registration.tsx","widgets/header/actions-header.ts","widgets/templates/header/header.tsx","widgets/header/header.tsx","App.tsx","serviceWorker.js","widgets/publics/reducer.ts","widgets/registration/reducer.ts","index.tsx"],"names":["module","exports","Toolbar","ButtonGroup","vertical","className","Styles","Group","Button","variant","PublicCard","props","Col","xs","sm","Card","Body","CardBody","Title","CardTitle","title","Text","CardText","text","connect","state","dispatch","items","i","push","key","CardDeck","CardWrapper","Image","src","doubleRightArrow","FIELD_IDS","RegistrationWindow","createChangeHandler","fieldId","event","value","console","log","onChange","target","Modal","show","onHide","onCloseClick","aria-labelledby","centered","Header","ModalHeader","Form","controlId","Label","InputGroup","Prepend","userIcon","Control","type","placeholder","emailIcon","loginIcon","Footer","onClick","TYPES","registrationReducer","createChangeUsername","username","createChangeEmail","email","createChangePassword","password","templateProps","createChangedHandler","isVisible","TYPE","Navbar","bg","Brand","BrandWrapper","dashboardIcon","LogoIcon","logoText","Nav","optionsList","map","optionText","Link","onSomeOptionClick","isSearchEnabled","size","inline","FormControl","onEntranceClick","headerTemplateProps","searchClickHandler","App","Container","Row","Boolean","window","location","hostname","match","defaultStore","publics","reducer","initialState","action","rootReducer","combineReducers","publicsReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fdfe3c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Group\":\"styles_Group__qcNiI\",\"Button\":\"styles_Button__1zb8L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Group\":\"styles_Group__1XNmy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardWrapper\":\"styles_CardWrapper__1Bt49\",\"Card\":\"styles_Card__121Za\",\"CardBody\":\"styles_CardBody__YuESO\",\"CardTitle\":\"styles_CardTitle__MeO5h\",\"CardIcon\":\"styles_CardIcon__3aM7O\",\"CardText\":\"styles_CardText__2iVm7\"};","module.exports = __webpack_public_path__ + \"static/media/double-arrow-right.4708789b.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BrandWrapper\":\"styles_BrandWrapper__VZZdk\",\"LogoIcon\":\"styles_LogoIcon__31oLo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardWrapper\":\"styles_CardWrapper__3iWUP\",\"Card\":\"styles_Card__3vH8V\",\"CardBody\":\"styles_CardBody__2gIj8\",\"CardTitle\":\"styles_CardTitle__35KU0\",\"CardIcon\":\"styles_CardIcon__3VzEo\",\"CardText\":\"styles_CardText__1Sf6R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ModalHeader\":\"authorization_ModalHeader__2OI6M\"};","module.exports = __webpack_public_path__ + \"static/media/email.f7155859.svg\";","module.exports = __webpack_public_path__ + \"static/media/login.d644ed95.svg\";","module.exports = __webpack_public_path__ + \"static/media/user.02bb06b8.svg\";","module.exports = __webpack_public_path__ + \"static/media/dashboard.9494657e.svg\";","\n \nimport * as React from \"react\"\nimport { ButtonGroup, Button } from 'react-bootstrap'\nimport Styles from './styles.module.css'\n\n\nexport const Toolbar = () => {\n  return (  \n    <ButtonGroup vertical className={Styles.Group}>\n        <Button variant=\"outline-dark\" className={Styles.Button}>Новый паблик</Button>\n        <Button variant=\"outline-dark\" className={Styles.Button}>item 2</Button>\n        <Button variant=\"outline-dark\" className={Styles.Button}>item 1</Button>      \n        <Button variant=\"outline-dark\" className={Styles.Button}>item 1</Button>\n    </ButtonGroup>\n  )\n}\n\n\nexport default Toolbar"," \n\nimport * as React from \"react\"\nimport { Card, Col } from 'react-bootstrap'\nimport Styles from './styles.module.css'\n\n\nexport type PublicCartProps = {\n  title: string, \n  text: string, \n  key: number\n}\n\n\nexport const PublicCard = (props: PublicCartProps) => {\n  return (\n    <Col xs={12} sm={4}>\n      <Card className={Styles.Card}>\n        <Card.Body className={Styles.CardBody}>\n          <Card.Title className={Styles.CardTitle}>{props.title}</Card.Title>\n          <Card.Text className={Styles.CardText}>{props.text}</Card.Text>\n        </Card.Body>  \n      </Card>\n    </Col>\n  )\n}\n\nexport default PublicCard\n\n\n\n","\n \nimport * as React from \"react\"\nimport { CardDeck } from 'react-bootstrap'\nimport PublicCard from '../templates/cards/public-card'\nimport Styles from './styles.module.css'\nimport { connect } from 'react-redux'\n\n\nexport const CardsBox = () => {\n\n  let items : any [] = []\n  for (let i of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    items.push((\n      <PublicCard key={i} title=\"test title\" text=\"test text\"/>\n    ))\n\n  return (\n    <CardDeck className={Styles.CardWrapper}>\n      {\n        items\n      }\n    </CardDeck>\n  )\n}\n\n\n/// export default CardsBox\n\nconst mapStateToProps = (state: any) => {\n  return {\n      \n  }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n     \n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardsBox)","\nimport * as React from \"react\"\nimport { ButtonGroup, Button, Image } from 'react-bootstrap'\nimport Styles from './styles.module.css'\nimport doubleRightArrow from '../../thirdparty/icons/double-arrow-right.svg'\n\nexport const Toolbar = () => {\n\n  return (  \n    <ButtonGroup className={Styles.Group}>\n         <Button variant='light' className={Styles.Button}>Виды</Button> \n         <Image src={doubleRightArrow} />      \n         <Button variant='light' className={Styles.Button}>Экскурсии</Button> \n         <Image src={doubleRightArrow} />      \n         <Button variant='light' className={Styles.Button}>Пешие</Button> \n         <Image src={doubleRightArrow} />      \n         <Button variant='light' className={Styles.Button}>клиент1</Button> \n    </ButtonGroup>\n  )\n}\n\n\nexport default Toolbar","\nimport * as React from \"react\";\nimport { Modal, Button, Form, InputGroup, Image } from 'react-bootstrap';\nimport Styles from './authorization.module.css'\nimport emailIcon from './email.svg'\nimport loginIcon from './login.svg'\nimport userIcon from './user.svg'\n\nexport type RegistrationWindowProps = {\n    username: string,\n    email: string,\n    password: string,\n\n    // onRegisterClick(): void, \n    onCloseClick(): void,\n    // onChanged(fieldId: string, value: string): void\n}\n\nexport const FIELD_IDS = {\n    name: \"name\",\n    email: \"email\",\n    password: \"password\"\n}\n\nconst RegistrationWindow = (props: RegistrationWindowProps) => {\n\n    const onChange = (fieldId: string, value: string) => {\n        // props.onChanged(fieldId, value)\n        console.log(`changed ${fieldId} to ${value}`)\n    }\n\n    const createChangeHandler = (fieldId: string) => (event: any) => {\n        onChange(fieldId, event.target.value)\n    }\n\n    return (\n        <Modal show={true} onHide={props.onCloseClick}\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n            <Modal.Header className={Styles.ModalHeader}>\n                <Modal.Title>Форма регистрации</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form>\n                    <Form.Group controlId=\"formGroupUsername\">\n                        <Form.Label>Имя пользователя</Form.Label>\n                        <InputGroup>\n                            <InputGroup.Prepend>\n                                <InputGroup.Text>\n                                    <Image src={userIcon}/>\n                                </InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <Form.Control  onChange={createChangeHandler(FIELD_IDS.name)} type=\"text\" placeholder=\"Имя пользователя\" />\n                        </InputGroup>\n                    </Form.Group>\n                    <Form.Group controlId=\"formGroupEmail\">\n                        <Form.Label>Электронный адрес</Form.Label>\n                        <InputGroup>\n                            <InputGroup.Prepend>\n                                <InputGroup.Text>\n                                    <Image src={emailIcon}/>\n                                </InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <Form.Control  onChange={createChangeHandler(FIELD_IDS.email)} type=\"email\" placeholder=\"Электронный адрес\" />\n                        </InputGroup>\n                    </Form.Group>\n                    <Form.Group controlId=\"formGroupPassword\">\n                        <Form.Label>Пароль</Form.Label>\n                        <InputGroup>\n                            <InputGroup.Prepend>\n                                <InputGroup.Text>\n                                    <Image src={loginIcon} />\n                                </InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <Form.Control onChange={createChangeHandler(FIELD_IDS.password)} type=\"password\" placeholder=\"Пароль\" />\n                        </InputGroup>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"outline-info\" onClick={() => { }}>\n                    Регистрация\n                </Button>\n                <Button variant=\"outline-info\" onClick={props.onCloseClick}>\n                    Закрыть\n                </Button>\n            </Modal.Footer>\n\n        </Modal>\n\n    )\n}\n\nexport default RegistrationWindow","import { FIELD_IDS } from './../templates/authorization/registration-modal';\n\nexport const TYPES = {\n    TYPE_CLOSE_CLICK: \"close-clicked\",\n    TYPE_ONCHANGE_FIELD_USERNAME: \"change-user-field\",\n    TYPE_ONCHANGE_FIELD_EMAIL: \"change-email-field\",\n    TYPE_ONCHANGE_FIELD_PASSWORD:  \"change-password-field\"     \n}\n\n\nexport const closeClickAction = () => {\n    return {\n        type: TYPES.TYPE_CLOSE_CLICK\n    }\n}\n\n//Action Creator\nexport const createChangeUsername=(value: string)=>{\n    return{\n        type: TYPES.TYPE_ONCHANGE_FIELD_USERNAME,\n        username: value,\n    }\n}\n\nexport const createChangeEmail=(value: string)=>{\n    return{\n        type: TYPES.TYPE_ONCHANGE_FIELD_EMAIL,\n        email: value\n    }\n}\n\nexport const createChangePassword=(value: string)=>{\n    return{\n        type: TYPES.TYPE_ONCHANGE_FIELD_PASSWORD,\n        password: value\n    }\n}\nexport default {\n    closeClickAction,\n    createChangeUsername,\n    createChangeEmail,\n    createChangePassword\n}","import * as React from \"react\"\nimport { connect } from 'react-redux'\nimport { RegistrationState } from './reducer'\nimport RegistrationWindow, { RegistrationWindowProps, FIELD_IDS } from '../templates/authorization/registration-modal'\nimport {createChangeUsername,createChangeEmail,createChangePassword,  TYPES } from './actions'\n\n\n\n\nexport const Registraion = (props: any) => {\n\n    const onCloseClick = () => {\n      props.onCloseClick()\n    }\n    \n    const createChangeHandler=(value: string, fieldId: string)=>{\n\n      if(FIELD_IDS.name===fieldId){\n        props.createChangeUsername(value)\n      }else if(FIELD_IDS.email===fieldId){\n        props.createChangeEmail(value)\n\n      }else if(FIELD_IDS.password===fieldId){\n        props.createChangePassword(value)\n      }\n    }\n    const templateProps: RegistrationWindowProps = {\n      createChangedHandler: createChangeHandler,\n      onCloseClick: onCloseClick, \n      username: props.username, \n      email: props.email, \n      password: props.password\n    }\n\n    return (\n        <>\n        {\n            props.isVisible\n            &&\n            // <RegistrationWindow onCloseClick={onCloseClick} username={props.username} email={props.email}  password={props.password}/>\n            <RegistrationWindow {...templateProps}/>\n        }         \n        </>   \n    )\n}\n\n\nconst mapStateToProps = (state: any) => {  \n  return { \n      ...state.registrationReducer     \n  }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onCloseClick: () => { \n      // dispatch(registrationActions.closeClickAction()) \n      dispatch({ \n        type: TYPES.TYPE_CLOSE_CLICK\n      })\n\n    },\n    createChangeUsername: (value: string)=>{\n\n     dispatch({\n      type: TYPES.TYPE_ONCHANGE_FIELD_USERNAME,\n      username: value\n     })\n    },\n    createChangeEmail: (value: string)=>{\n      dispatch({\n        type: TYPES.TYPE_ONCHANGE_FIELD_EMAIL,\n        email: value\n\n      })\n    },\n    createChangePassword: (value: string)=>[\n      dispatch({\n        type: TYPES.TYPE_ONCHANGE_FIELD_PASSWORD,\n        password: value\n      })\n    ]\n    \n  }\n\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Registraion)","\nexport const TYPE={\n    TYPE_CLICK_ENTRANCE: \"clicked-entrance\"\n}\n\n\nexport const onEntranceClick=()=>{\n    return {\n        type: TYPE.TYPE_CLICK_ENTRANCE\n    }\n    \n\n}\n\n\nexport default {\n    onEntranceClick\n}","\n \nimport * as React from \"react\"\nimport { Navbar, Nav, Form, FormControl, Button, Image } from 'react-bootstrap'\nimport dashboardIcon from './dashboard.svg'\nimport Styles from './styles.module.css'\n\n\nexport type HeaderProps = {\n  logoText: string, \n  optionsList: string[], \n  isSearchEnabled: boolean,   \n  searchClickHandler(searchText: string): void, \n  onSomeOptionClick(optionText: string): void\n}\n\n\nconst Header = (props: HeaderProps) => {\n  return (\n    <Navbar bg=\"light\" variant=\"light\">\n      <Navbar.Brand className={Styles.BrandWrapper}>\n        <Image src={dashboardIcon} className={Styles.LogoIcon} />\n        {props.logoText}\n      </Navbar.Brand>\n      <Nav className=\"mr-auto\">\n\n        {\n          props.optionsList.map(optionText => \n              <Nav.Link key={optionText} onClick={() => props.onSomeOptionClick(optionText)}>{optionText}</Nav.Link>\n          )\n        }\n\n        {\n          props.isSearchEnabled\n          &&\n          <Button variant=\"outline-info\" size=\"sm\" className=\"d-block d-sm-none\">Поиск</Button>\n        }\n\n\n      </Nav>\n      {\n        props.isSearchEnabled\n          && \n          <Form inline className=\"d-none d-sm-block\">\n            <FormControl type=\"text\" placeholder=\"Поиск\" className=\"mr-sm-2\" />\n            <Button variant=\"outline-info\">Найти</Button>\n        </Form>\n        }\n  </Navbar>\n  )\n}\n\nexport default Header","\nimport * as React from 'react';\nimport {connect} from 'react-redux';\nimport {TYPE} from './actions-header';\nimport HeaderTemplate from \"../templates/header/header\"\nimport {HeaderProps} from \"../templates/header/header\"\n\n\nconst Header=(props: any)=>{\n\n\n    const onSomeOptionClick=(optionText: string)=>{\n\n         if (optionText==='вход'){\n            props.onEntranceClick()\n         }\n    }\n    \n    const headerTemplateProps: HeaderProps = {\n        logoText: \"public\", \n        optionsList: [\"вход\", \"карта\", \"информация\"], \n        isSearchEnabled: true, \n        onSomeOptionClick: onSomeOptionClick,\n \n        searchClickHandler: props.searchClickHandler\n\n    }\n     return(\n           <HeaderTemplate {...headerTemplateProps}/>\n     )\n    \n}\n\n//чтение состояния\nlet mapStateToProps=(state: any)=>{\n    return{\n               \n    } \n}\n\n//передача события(действие для изменения состояния компонента)\n//это метод,функция, которая возвращает объект-ключ объекта-имя моего метода, значение-сама наша функция \nlet mapDispatchToProps=(dispatch: any)=>{\n   return {\n    onEntranceClick: ()=> dispatch({\n        type: TYPE.TYPE_CLICK_ENTRANCE // FIXED\n    }) \n   }\n}\n\n//connect-генерируем компонент\nexport default  connect(mapStateToProps, mapDispatchToProps)(Header)  ","\nimport React from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport './thirdparty/bootstrap/dist/css/bootstrap.css'\n\n\nimport Tollbar from './widgets/left-toolbar/left-toolbar'\nimport CardsBox from './widgets/publics/cards-box'\nimport NavMap from './widgets/nav-map/nav-map'\nimport Registration from './widgets/registration/registration'\nimport Header from './widgets/header/header'\n\nconst App = () => {\n    return (      \n      <Container>              \n        <Header />\n        <Row className=\"justify-content-md-center\">\n          <NavMap />          \n        </Row>        \n          <Row>\n            <Col sm={3} className=\"d-none d-sm-block\">\n              <Tollbar />\n            </Col>\n            <Col sm={9}>\n              <CardsBox />\n            </Col>\n          </Row>        \n          <Registration />\n      </Container>                     \n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\n\nimport { Reducer } from 'redux'\n\n\nexport type Public = {\n    name: string\n    description: string\n}\n\n\nexport type PublicsStore = {\n    publics: Public[]\n}\n\n\nconst defaultStore : PublicsStore = {\n    publics: []\n}\n\n\nexport const reducer: Reducer<any> = (state: PublicsStore = defaultStore, action: any) => {\n    return state\n}\n\n\nexport default reducer","\nimport { Reducer } from 'redux'\nimport actions, { TYPES } from './actions'\nimport { TYPE } from '../header/actions-header'\nimport { FIELD_IDS } from './../templates/authorization/registration-modal';\n\nexport type RegistrationState = {\n    isVisible?: boolean,\n    username: string,\n    email: string,\n    password: string\n}\n\nexport const initialState: RegistrationState = {\n    isVisible: false,\n    username: '',\n    email: '',\n    password: ''\n}\n\n\n\nexport const reducer: Reducer<any> = (state: RegistrationState = initialState, action: any) => {\n    switch (action.type) {\n        case TYPES.TYPE_CLOSE_CLICK: return {\n            ...state,\n            isVisible: false\n        }\n        case TYPE.TYPE_CLICK_ENTRANCE: return {\n            ...state,\n            isVisible: true\n        }\n        case TYPES.TYPE_ONCHANGE_FIELD_USERNAME: return {\n\n            ...state,\n            username: action.value\n        }\n        case TYPES.TYPE_ONCHANGE_FIELD_EMAIL: return{\n            ...state,\n            email: action.value\n        }\n        case TYPES.TYPE_ONCHANGE_FIELD_PASSWORD: return{\n            ...state,\n            password: action.value\n        }\n        default:\n            return state\n    }   \n    \n}\nexport default reducer\n","\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\nimport { applyMiddleware, createStore } from \"redux\"\nimport thunkMiddleware from \"redux-thunk\"\nimport { combineReducers } from \"redux\"\nimport { Provider } from 'react-redux'\nimport publicsReducer from './widgets/publics/reducer'\nimport registrationReducer from './widgets/registration/reducer'\n\n\nconst rootReducer = combineReducers({\n    publicsReducer, \n    registrationReducer\n})\n\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>, document.getElementById('root')\n)\n\n\nserviceWorker.unregister()\n\n"],"sourceRoot":""}